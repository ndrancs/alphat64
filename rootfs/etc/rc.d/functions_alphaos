#!/usr/bin/bash
#
# Copyright (c) alphaOS
# Written by simargl <archpup-at-gmail-dot-com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

export LANG="C"
export PATH="/usr/bin:/bin"

status_func()
{
  ddistance="\\033[54G"
  fdistance="\\033[50G"
  if [ $? = 0 ];then
    echo -e $ddistance$Green"[ok]"$Color_Off >/dev/console
  else
    echo -e $fdistance$BPurple"[failed]"$Color_Off >/dev/console
  fi
}

remounting_root_filesystem()
{
  echo -en $Green"* "$Color_Off"Remounting root filesystem" >/dev/console
  mount -t proc proc /proc
  mount -t sysfs sysfs /sys
  mount -o remount,rw /
  rm -f /etc/mtab
  ln -s /proc/mounts /etc/mtab
  exec 1>/tmp/boot.log 2>&1
  status_func
}

populating_device_nodes()
{
  echo -en $Green"* "$Color_Off"Populating device nodes" >/dev/console
  mount -t devtmpfs devtmpfs /dev
  mkdir /dev/pts
  mkdir /dev/shm
  mount devpts
  mount tmpfs
  status_func
}

updating_shared_library_links()
{
  if [ ! -f /etc/ld.so.cache ];then
    echo -en $Green"* "$Color_Off"Updating shared library links" >/dev/console
    ldconfig
    status_func
  fi
}

starting_udev_daemon()
{
  echo -en $Green"* "$Color_Off"Starting udev daemon" >/dev/console
  $UDEV --daemon
  udevadm trigger
  KERNVER="`uname -r`"
  if [ ! -f /usr/lib/modules/${KERNVER}/modules.dep ];then
    depmod
  fi
  modprobe fbcon
  status_func
}

activating_swap()
{
  echo -en $Green"* "$Color_Off"Activating swap" >/dev/console
  swapon -a 2> /dev/null
  status_func
}

loading_kernel_modules()
{
  echo -en $Green"* "$Color_Off"Loading kernel modules" >/dev/console
  MODALIASES="`ls /sys/bus/*/devices/*/modalias`"
  for ONEMODALIAS in $MODALIASES
    do
    ONEPATH="`dirname $ONEMODALIAS`"
    if [ -e ${ONEPATH}/uevent ];then
      echo add > ${ONEPATH}/uevent
      sleep 0.02
    fi
  done
  [ ! -d /proc/acpi ] && modprobe apm
  echo "1" > /proc/sys/net/ipv4/ip_dynaddr
  hostname -F /etc/hostname

  WAITCNT=1
  while [ $WAITCNT -le 3 ];do
    sleep 0.3
    WAITCNT=`expr $WAITCNT + 1`
  done

  if [ "$MODULES" != "" ];then
    for MODULE in $MODULES; do
      echo -en $Green"* "$Color_Off"Loading module $MODULE" >/dev/console
      modprobe $MODULE
    done
  fi
  status_func
}

triggering_udev_uevents()
{
  echo -en $Green"* "$Color_Off"Triggering udev uevents" >/dev/console
  udevadm settle --timeout=5
  echo "/usr/bin/udevd" > /proc/sys/kernel/hotplug
  status_func
}

read_bootcodes()
{
  if grep -q noxorg /proc/cmdline; then
    sed -i 's|X_AUTOLOGIN="yes"|X_AUTOLOGIN="no"|g' /etc/rc.conf
  fi
  if grep -q usbmode /proc/cmdline; then
    if [ -d "/mnt/live/memory/bundles/changes.fs4" ]; then 
      mount -n -o remount,add:1:/mnt/live/memory/bundles/changes.fs4=rr aufs /
    fi
  fi  
}

setup_services()
{
  modprobe battery
  if [ -d /proc/acpi/battery ]; then
   results="`find /proc/acpi/battery -mindepth 1 -type d`"
   if [ ! -z "$results" ]; then
    modprobe ac
    modprobe thermal
    modprobe fan
   else
    rmmod battery
   fi
  fi

  if [ ! -f /etc/rc.local ];then
   echo "  #this file is called from rc.sysinit
  #When firewall is installed, will append lines to this file" > /etc/rc.local
  fi
  . /etc/rc.local

  ifconfig lo up
  ifconfig $interface up
  read_bootcodes
}

starting_daemons()
{
  echo -en $Green"* "$Color_Off"Starting frisbee network manager" >/dev/console
  /etc/rc.d/frisbee start&
  status_func
  for DAEMON in $DAEMONS; do 
    if [ -f /etc/rc.d/$DAEMON ]; then
      . /etc/rc.d/$DAEMON
      echo -en $Green"* "$Color_Off"Starting $description" >/dev/console
      /etc/rc.d/$DAEMON start
      status_func
    fi
  done
}

mount_all_partitions()
{
  for i in $(blkid -o list | grep "(not mounted)" | sort | cut -d" " -f1 | grep -E -v "/loop|sr0" | sed 's|/dev/||g'); do
  FSTYPE="$(guess_fstype /dev/$i)"
    if [[ $FSTYPE == "ntfs" ]]; then
      MOUNTCMD="ntfs-3g"; else
      MOUNTCMD="mount"
    fi
  if [ ! -d /mnt/$i ]; then mkdir /mnt/$i; fi
  $MOUNTCMD /dev/$i /mnt/$i
  done
}


general_system_settings()
{
  echo -en $Green"* "$Color_Off"General system settings" >/dev/console
  if [ ! -d /mnt/home ]; then ln -s /mnt/live/memory/data /mnt/home; fi
  (if [ ! -f /usr/share/mime/globs ]; then update-mime-database /usr/share/mime; fi) &
  (if [ ! -f /usr/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache ]; then gdk-pixbuf-query-loaders --update-cache; fi) &
  (if [ ! -f /usr/share/icons/hicolor/icon-theme.cache ]; then gtk-update-icon-cache /usr/share/icons/hicolor; fi) &
  (if [ ! -f /usr/share/applications/mimeinfo.cache ]; then update-desktop-database; fi) &
  (if [ ! -f /usr/share/glib-2.0/schemas/gschemas.compiled ]; then glib-compile-schemas /usr/share/glib-2.0/schemas; fi) &
  (if [ ! -f /usr/share/fonts/TTF/fonts.scale ]; then fc-cache -f -s > /dev/null; mkfontscale /usr/share/fonts/TTF; mkfontdir /usr/share/fonts/TTF; fi) &
  [ $AUTOMOUNT_VOLUMES == "yes" ] && mount_all_partitions
  status_func
  sleep 0.5
}


savefile_dialog_on_reboot()
{
  if [ ! -f /tmp/savefile.txt ]; then 
    yad --title="Create savefile" --text="Do you want to save your changes in a savefile?" \
    --window-icon="preferences-system" --button="gtk-cancel:1" --button="gtk-ok:0"
    ret=$?
    if [ $ret -eq 0 ]; then
      makepfile.sh
    fi
  fi
}

rc_reboot_poweroff_initiate()
{
  rm -rf {/root/{.adobe,.cache,.macromedia,.thumbnails},/var/log/{messages,X*}}
  save-session
  clear
  exec 1> /dev/null 2>&1
  
  echo -e $BWhite"Initiating reboot/poweroff..." >/dev/console

  for service in /etc/rc.d/*; do [ -x $service ] && $service stop; done

  echo -en $Green"* "$Color_Off"Shutting down udev" >/dev/console
  udevadm control --exit
  udevadm settle --timeout=120
  status_func
  
  echo -en $Green"* "$Color_Off"Syncing all filesystems" >/dev/console
  sync
  sleep 2
  status_func

  echo -en $Green"* "$Color_Off"Sending SIGTERM to processes" >/dev/console
  killall5
  status_func
  
  echo -en $Green"* "$Color_Off"Deactivating swap" >/dev/console
  swapoff -a
  status_func
  
  echo -en $Green"* "$Color_Off"Unmounting filesystems" >/dev/console
  umount -l /sys &> /dev/null
  umount -l /dev &> /dev/null
  umount -ar -l &> /dev/null
  status_func
}

rc_system_reboot()
{
  rc_reboot_poweroff_initiate
  echo -e $BWhite"----------------------------" >/dev/console
  echo -e $BCyan"> REBOOT"$Color_Off >/dev/console
  exec toybox reboot
}

rc_system_poweroff()
{
  rc_reboot_poweroff_initiate
  echo -e $BWhite"----------------------------" >/dev/console
  echo -e $BCyan"> POWEROFF"$Color_Off >/dev/console
  exec toybox poweroff
}

# Reset
Color_Off='\e[0m'       # Text Reset

# Regular Colors
Black='\e[0;30m'        # Black
Red='\e[0;31m'          # Red
Green='\e[0;32m'        # Green
Yellow='\e[0;33m'       # Yellow
Blue='\e[0;34m'         # Blue
Purple='\e[0;35m'       # Purple
Cyan='\e[0;36m'         # Cyan
White='\e[0;37m'        # White

# Bold
BBlack='\e[1;30m'       # Black
BRed='\e[1;31m'         # Red
BGreen='\e[1;32m'       # Green
BYellow='\e[1;33m'      # Yellow
BBlue='\e[1;34m'        # Blue
BPurple='\e[1;35m'      # Purple
BCyan='\e[1;36m'        # Cyan
BWhite='\e[1;37m'       # White

# Underline
UBlack='\e[4;30m'       # Black
URed='\e[4;31m'         # Red
UGreen='\e[4;32m'       # Green
UYellow='\e[4;33m'      # Yellow
UBlue='\e[4;34m'        # Blue
UPurple='\e[4;35m'      # Purple
UCyan='\e[4;36m'        # Cyan
UWhite='\e[4;37m'       # White

# Background
On_Black='\e[40m'       # Black
On_Red='\e[41m'         # Red
On_Green='\e[42m'       # Green
On_Yellow='\e[43m'      # Yellow
On_Blue='\e[44m'        # Blue
On_Purple='\e[45m'      # Purple
On_Cyan='\e[46m'        # Cyan
On_White='\e[47m'       # White

# High Intensty
IBlack='\e[0;90m'       # Black
IRed='\e[0;91m'         # Red
IGreen='\e[0;92m'       # Green
IYellow='\e[0;93m'      # Yellow
IBlue='\e[0;94m'        # Blue
IPurple='\e[0;95m'      # Purple
ICyan='\e[0;96m'        # Cyan
IWhite='\e[0;97m'       # White

# Bold High Intensty
BIBlack='\e[1;90m'      # Black
BIRed='\e[1;91m'        # Red
BIGreen='\e[1;92m'      # Green
BIYellow='\e[1;93m'     # Yellow
BIBlue='\e[1;94m'       # Blue
BIPurple='\e[1;95m'     # Purple
BICyan='\e[1;96m'       # Cyan
BIWhite='\e[1;97m'      # White

# High Intensty backgrounds
On_IBlack='\e[0;100m'   # Black
On_IRed='\e[0;101m'     # Red
On_IGreen='\e[0;102m'   # Green
On_IYellow='\e[0;103m'  # Yellow
On_IBlue='\e[0;104m'    # Blue
On_IPurple='\e[10;95m'  # Purple
On_ICyan='\e[0;106m'    # Cyan
On_IWhite='\e[0;107m'   # White

DATE=$(date +%d-%m-%y)
