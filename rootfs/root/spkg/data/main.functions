#!/usr/bin/bash

###################
# SPKG
###################

spkg_check_exist()
{
  if [ $PKG ]
  then
    if [ ! -d $defdir/$PKG ]; then
      echo -en $Purple"Package NaME Is Not Valid" $Color_Off
      status
      exit 1
    else
      . /$defdir/$PKG/def
      if [ $PKG != $name ]; then
        echo -en $Red"Package and folder name are different!"$Color_Off
      status
      exit 1
      fi
    fi
  else
    echo -en $Purple"YoU MusT TyPE pACKaGe Name... Exit" $Color_Off
    status
    exit 1
  fi
}

spkg_show_info()
{
  . /$defdir/$PKG/def
  echo -e $Red"Package Name:  "$Yellow$name
  echo -e $Red"Version:       "$Yellow$version
  echo -e $Red"Revision:      "$Yellow$revision
  echo -e $Red"Description:   "$Yellow$description
  echo -e $Red"Category:      "$Yellow$category 
  echo -e $Red"Source URL:    "$Yellow$source
  echo -e $Red"Homepage:      "$Yellow$homepage
  echo -e $Red"Maintainer:    "$Yellow$maintainer
  echo -e $Red"Dependencies:  "$Yellow$depends
  echo -e $Red"Build Deps:    "$Yellow$makedepends
}

spkg_setup_dirs()
{
  startdir="$compile_dir/$PKG"
  build="$startdir/build"
  destdir="$startdir/install"
  if [ -d $startdir ]; then rm -r $startdir; fi
  for dir in $srcdir $pkgdir $defdir $build $destdir; do
    if [ ! -d $dir ]; then mkdir -p $dir; fi
  done
}

spkg_download()
{
  spkg_check_exist
  spkg_show_info
  spkg_setup_dirs
  if [ "$source" ]; then
    cd $srcdir
      for address in $source; do
        file=$(basename $address)
        if [ -f $file ]; then
        echo -e $White"We have source $file"$Color_Off
        else
        echo -en $White"Downloading $file...     "
        wget --progress=dot $address --no-check-certificate 2>&1 | grep --line-buffered "%" | \
        sed -u -e "s,\.,,g" | awk '{printf("\b\b\b\b%4s", $2)}'
        echo -e $Color_Off
          if [ ! -f $file ]; then
            echo -e $Purple"File $file download failed!"$Color_Off && exit 1
          fi
        fi
      done  
  else
    echo -en $Cyan"Source url is not defined"$Color_Off
    status
  fi
  if [ "$giturl" ]; then
    echo -en $Cyan"Building package from $giturl"$Color_Off
    status
    if [ ! -f $srcdir/$name-$version.tar.xz ]; then
      cd $build
      git clone "$giturl" $name
      rm -r $name/.git
      bsdtar -cJf $name-$version.tar.xz $name
      rm -r $name
      mv $name-$version.tar.xz $srcdir
    fi
  fi
  if [ "$hgurl" ]; then
    echo -en $Cyan"Building package from $hgurl"$Color_Off
    status
    if [ ! -f $srcdir/$name-$version.tar.xz ]; then
      cd $build
      hg clone $hgurl $name
      rm -r $name/.hg
      bsdtar -cJf $name-$version.tar.xz $name
      rm -r $name
      mv $name-$version.tar.xz $srcdir
    fi
  fi
}

spkg_extract()
{
  if [ "$source" ]; then
    cd $srcdir
    for address in $source; do
      file=$(basename $address)
        echo -en $White"Extracting $file..."$Color_Off
        status_busy
          case "$file" in
          *.deb) bsdtar -xf $file -C $build && tar -xf $build/data.* -C $build && rm $build/data.* &>/dev/null 2>&1;;
          *.rpm) bsdtar -xf $file -C $build &>/dev/null 2>&1;;
          *.tar) bsdtar xf $file -C $build &>/dev/null 2>&1;;
          *.tar.gz|*.tgz|*.pet) bsdtar -xf $file -C $build &>/dev/null 2>&1;;
          *.tar.bz2|*.tbz|*.tbz2) bsdtar xjf $file -C $build &>/dev/null 2>&1;;
          *.tar.xz) tar xf $file -C $build &>/dev/null 2>&1;;
          *.zip|*.xpi) unzip -o $file -d $build &>/dev/null 2>&1;;
          *.txz) bsdtar Jxvf $file -C $build &>/dev/null 2>&1;;
          *.fpm) bsdtar -xf $file -C $build &>/dev/null 2>&1;;
          *.tazpkg)
            cpio -idm < $file &>/dev/null 2>&1
            unlzma -c fs.cpio.lzma | cpio -idm &>/dev/null 2>&1
            cp -a fs/* $build
            rm -r fs* files.list md5sum description.txt receipt &>/dev/null 2>&1;;
          esac
        status
    done
  fi
  if [[ "$giturl" || "$hgurl" ]]; then 
    file=$name-$version.tar.xz
    echo -en $White"Extracting $file..."$Color_Off
    status_busy
    bsdtar -xf $srcdir/$file -C $build
    status
  fi
}

spkg_compress_directory()
{
  cd $destdir 
  
  if [[ $strip == *no* ]]; then echo -en $Green"Do NOT strip symbols from binaries"$Color_Off&&status_busy&&status; else
  echo -en $Green"Striping unneeded symbols from binaries and libraries"$Color_Off&&status_busy
  for dir in $destdir/bin $destdir/sbin $destdir/usr/bin $destdir/usr/sbin
   do
	if [ -d $dir ]; then
	 find $dir -type f -exec strip '{}' > /dev/null 2>&1 \;
	fi
  done
  find $destdir -name "*.so*" -exec strip --strip-unneeded '{}' > /dev/null 2>&1 \;
  find $destdir -name "*.a" -exec strip -g '{}' > /dev/null 2>&1 \;
  find $destdir -type f -name "*.pyc" -delete
  find $destdir -type f -name "*.pyo" -delete
  status
  fi
  echo -en $Green"Removing doc.. man.. splitting locales.."$Color_Off&&status_busy
  if [ -d $destdir/usr/doc ]; then rm -r $destdir/usr/doc; fi
  if [ -d $destdir/usr/man ]; then rm -r $destdir/usr/man; fi
  if [ -d $destdir/usr/share/doc ]; then rm -r $destdir/usr/share/doc; fi
  if [ -d $destdir/usr/share/gtk-doc ]; then rm -r $destdir/usr/share/gtk-doc; fi
  if [ -d $destdir/usr/share/man ]; then rm -r $destdir/usr/share/man; fi
  if [ -d $destdir/usr/share/info ]; then rm -r $destdir/usr/share/info; fi
  if [ -d $destdir/usr/share/gnome/help ]; then rm -r $destdir/usr/share/gnome/help; fi
  if [ -d $destdir/usr/share/help ]; then rm -r $destdir/usr/share/help; fi
  if [ -f $destdir/usr/lib/locale ]; then rm -r $destdir/usr/lib/locale; fi
  
  find . -type f -print | sed s/'^.'/''/ > $destdir/var/lib/spkg/installed/$name/files.list
  find ./ -type l -print | sed s/'^.'/''/ >> $destdir/var/lib/spkg/installed/$name/files.list 
  
  INSTALLED_SIZE=$(du -sb $destdir | sed "s|$destdir||g" | sed 's|	||g')
  spkg_pacman_files_entries
  spkg_pacman_desc_entries
  status
  
  echo -en $Green"Compressing package"$Color_Off&&status_busy
  cd $destdir
  LINES=$(cat $destdir/var/lib/spkg/installed/$name/files.list | wc -l)
  if [ "$LINES" -le 1 ]; then
    echo -en $Purple"Empty package... Exit"$Color_Off
    status
    exit 1
  fi
  cd .. && bsdtar -jcvf $name-$version-$revision-$CARCH.spkg install &> /dev/null 2>&1
  SIZE=$(eval du -sh $name-$version-$revision-$CARCH.spkg | sed "s/$name-$version-$revision-$CARCH.spkg//")
  mv $name-$version-$revision-$CARCH.spkg $pkgdir
  status
  echo -e $Red"Package: $Yellow"$name-$version $SIZE in $LINES files$Color_Off
}

spkg_pacman_desc_entries()
{
  desc="$destdir/var/lib/pacman/local/$name-$version-$revision/desc"
  install -d $(dirname $desc)
  echo "%NAME%">$desc
  echo "$name">>$desc
  echo "">>$desc
  echo "%VERSION%">>$desc
  echo "$version-$revision">>$desc
  echo "">>$desc  
  echo "%DESC%">>$desc
  echo "$description">>$desc
  echo "">>$desc   
  echo "%URL%">>$desc
  echo "$homepage">>$desc
  echo "">>$desc
  echo "%PACKAGER%">>$desc
  echo "$maintainer">>$desc
  echo "">>$desc
  echo "%SIZE%">>$desc
  echo "$INSTALLED_SIZE">>$desc  
  echo "">>$desc 
  if [ "$replaces" ]; then
    echo "%REPLACES%">>$desc
    for i in $replaces; do echo "$i" >>$desc; done
    echo "">>$desc 
  fi
  if [ "$conflict" ]; then
    echo "%CONFLICTS%">>$desc
    for i in $conflict; do echo "$i" >>$desc; done
    echo "">>$desc 
  fi
  if [ "$provides" ]; then
    echo "%PROVIDES%">>$desc
    for i in $provides; do echo "$i" >>$desc; done
    echo "">>$desc
  fi
}

spkg_pacman_files_entries()
{
  files="$destdir/var/lib/pacman/local/$name-$version-$revision/files"
  rm $files 2>/dev/null
  install -d $(dirname $files)
  cd $destdir
  find $PWD -type d -not -path "*/var/lib/pacman/*" | sort | while read dir; do
    echo $dir"/" >>$files && find "$dir" -maxdepth 1 -type f -o -type l >>$files
  done
  sed -i "s|$destdir/||g" $files
  sed -i 's|^$|%FILES%|g' $files
}

spkg_compile_package()
{
  export CFLAGS
  export CXXFLAGS
  export LDFLAGS
  check_dist="\\033[36G"
  cp -a $defdir/$PKG/* $startdir> /dev/null 2>&1 
  cd $build
  echo -e $BCyan"  >> Checking dependencies..."$Color_Off
  for i in $depends; do
    if [ -d /var/lib/spkg/installed/$i ]; then check="found"&&color="$Green"; else check="missing"&&color="$Purple"; fi
    echo -e $Yellow "    $i"$check_dist$color$check
  done
  echo -e $BCyan"  >> Checking build dependencies..."$Color_Off
  for i in $makedepends; do
    if [ -d /var/lib/spkg/installed/$i ]; then check="found"&&color="$Green"; else check="missing"&&color="$Purple"; fi
    echo -e $Yellow "    $i"$check_dist$color$check
  done  
  echo -e $BGreen"  >> Starting compile..."
  echo -en $Green
  compile
  if [ $? -ne 0 ];then echo -e $Purple"Compiling package $PKG failed!"$Color_Off && echo $PKG >> $compile_dir/compile.log && exit; fi
  echo -e $BWhite"  >> Starting package..."$Color_Off
  echo -en $White
  package
  install -d $destdir/var/lib/spkg/installed/$name
  mv $startdir/def $destdir/var/lib/spkg/installed/$name/def
  spkg_compress_directory
  sleep 0.3
}

spkg_post_install_remove_actions()
{
  if [ "$ICONS" ]; then 
    echo -en $Green"Rebuilding the gtk+ icon cache... "$Color_Off
    gtk-update-icon-cache /usr/share/icons/hicolor &>/dev/null 2>&1
    status
  fi
  if [ "$DESKTOP" ]; then
    echo -en $Green"Mime types database update... "$Color_Off
    update-desktop-database &>/dev/null 2>&1
    status
  fi
  if [ "$GSETTINGS" ]; then
    echo -en $Green"Gsettings xml schema files... "$Color_Off
    glib-compile-schemas /usr/share/glib-2.0/schemas &>/dev/null 2>&1
    status
  fi
  if [ "$FONTS" ]; then
    echo -en $Green"Updating font cache... "$Color_Off
    fc-cache -f -s > /dev/null
    mkfontscale /usr/share/fonts/TTF
    mkfontdir /usr/share/fonts/TTF
    status
  fi
}

spkg_post_install_actions()
{
  ICONS=$(cat /var/lib/spkg/installed/$name/files.list | grep /usr/share/icons/hicolor)
  DESKTOP=$(cat /var/lib/spkg/installed/$name/files.list | grep /usr/share/applications)
  GSETTINGS=$(cat /var/lib/spkg/installed/$name/files.list | grep /usr/share/glib-2.0/schemas)
  FONTS=$(cat /var/lib/spkg/installed/$name/files.list | grep /usr/share/fonts/TTF)
  spkg_post_install_remove_actions
}

spkg_install_package()
{
  if [ "$PKG" ]
  then
    for ONE in $PKG; do
    if [ ! -f $ONE ]; then
      echo -en $Purple"$ONE does not exist"$Color_Off
      status
      continue
    fi
    if [[ ! $ONE =~ ".spkg" ]]; then
      echo -en $Purple"$ONE is wrong name format"$Color_Off
      status
      continue
    fi    
    if [ -d /tmp/$ONE ]; then rm -r /tmp/$ONE; fi
    mkdir -p /tmp/$ONE
    bsdtar xjf $ONE -C /tmp/$ONE
    . /tmp/$ONE/install/var/lib/spkg/installed/*/def
    if [ -d /var/lib/spkg/installed/$name ]; then
      echo -en $Purple"$name is already installed"$Color_Off
      status
    else
      echo -en $Green"Installing $name files"$Color_Off && status_busy
      cp -ax /tmp/$ONE/install/* /
      status
      . /var/lib/spkg/installed/$name/def
      type post_install &>/dev/null && post_install
      spkg_post_install_actions
    fi
    rm -r /tmp/$ONE
    done
  else
    echo -en $Purple"YoUu MusT TyPE pACKaGe Name... "$Color_Off
    status
    exit
  fi  
}

spkg_compile_install()
{
  cd $pkgdir
  spkg -i $name-$version-$revision-$CARCH.spkg
}

spkg_post_remove_actions()
{
  ICONS=$(cat /tmp/$ONE/files.list | grep /usr/share/icons/hicolor)
  DESKTOP=$(cat /tmp/$ONE/files.list | grep /usr/share/applications)
  GSETTINGS=$(cat /tmp/$ONE/files.list | grep /usr/share/glib-2.0/schemas)
  FONTS=$(cat /tmp/$ONE/files.list | grep /usr/share/fonts/TTF) 
  spkg_post_install_remove_actions
}

spkg_remove_package()
{
  if [ "$PKG" ]
  then
    for ONE in $PKG; do
    if [ -d /var/lib/spkg/installed/$ONE &>/dev/null ]; then
      mkdir /tmp/$ONE 2>/dev/null
      cp -f /var/lib/spkg/installed/$ONE/files.list /tmp/$ONE
      cp -f /var/lib/spkg/installed/$ONE/def /tmp/$ONE
      echo -en $Red"Removing $ONE"$Color_Off && status_busy
      cat /tmp/$ONE/files.list | while read file ; do rm -r "$file"; done
      status
      . /tmp/$ONE/def
      type post_remove &>/dev/null && post_remove
      spkg_post_remove_actions
      rm -r /tmp/$ONE
      rm -r /var/lib/spkg/installed/$ONE
    else
      echo -en $Purple"Package $ONE is not installed"$Color_Off
      status
    fi
    done
  else
  echo -en $Purple"YoU MusT TyPE pACKaGe Name... Exit"$Color_Off
  status
  exit
  fi
}

spkg_repack()
{
  if [ $REPACK ]
    then
    if [ -d /var/lib/spkg/installed/$REPACK ]; then
      if [ -d $build/$REPACK ]; then rm -r $build/$REPACK; fi
      mkdir -p $build/$REPACK/install 2>/dev/null
      cd $build/$REPACK/install
      cat /var/lib/spkg/installed/$REPACK/files.list | while read file ; do
        dir=${file%\/*}
        if [ ! -d "$build/$REPACK/install/$dir" ]; then mkdir -p "$build/$REPACK/install/$dir"; fi
        cp -ax "$file" "$build/$REPACK/install$file"
      done 
      . /var/lib/spkg/installed/$REPACK/def
      destdir="$build/$REPACK/install"
      spkg_compress_directory
    else
      echo -en $Red"Package $REPACK isn't installed"$Color_Off
      status
    fi
  else
  echo -en $Purple"YoU MusT TyPE pACKaGe Name... Exit"$Color_Off
  status
  exit
  fi
}

spkg_pack_folder()
{
  if [ $PACK ]
    then
    if [ ! -d $PACK/install/var/lib/spkg/installed/$PACK ]; then echo -en $Red"Wrong folder... "$Color_Off && status && exit ; fi
    . $PACK/install/var/lib/spkg/installed/$PACK/def
    if [ $PACK == $name ]; then
      destdir="$PWD/$PACK/install"
      pkgdir="$PWD"
      spkg_compress_directory
    else
    echo -en $Red"Package and folder name are different..."$Color_Off && status && exit
    fi   
  else
  echo -en $Purple"YoU MusT TyPE pACKaGe Name... Exit"$Color_Off
  status
  exit
  fi
}

spkg_extract_spkg()
{
  if [ $SPKG ]
    then
    if [ -f $SPKG ]; then
      echo -en $Cyan"Extracting $SPKG..."$Color_Off&&status_busy
      bsdtar xjf $SPKG -C $PWD &> /dev/null 2>&1
      if [ -d "install/var/lib/spkg/installed" ]; then
        . /$PWD/install/var/lib/spkg/installed/*/def
        mkdir $name
        mv install $name
      fi
      status
    else
      echo -en $Red"$PKG is Not Valid"$Color_Off
      status
    fi
  else
  echo -en $Purple"TyPE Full pACKaGe Name..."$Color_Off
  status
  exit
  fi
}

spkg_extract_all()
{
  for one in $(ls *.spkg); do
    echo -en $Cyan"Extracting $one..."$Color_Off&&status_busy
    bsdtar xjf $one -C $PWD &> /dev/null 2>&1
    status
  done
}

spkg_arch2def_convert()
{
  name="$(cat PKGBUILD | grep pkgbase= | sed 's|pkgbase=||g' | sed 's|\"||g')"
  if [ ! $name ]; then name="$(cat PKGBUILD | grep pkgname= | sed 's|pkgname=||g' | sed 's|\"||g')"; fi
  version="$(cat PKGBUILD | grep pkgver= | sed 's|pkgver=||g' | sed 's|\"||g')"
  revision="$(cat PKGBUILD | grep pkgrel= | sed 's|pkgrel=||g' | sed 's|\"||g')"
  category="development"
  description="$(cat PKGBUILD | grep pkgdesc= | sed 's|pkgdesc=||g' | sed 's|\"||g')"
  source="$(cat PKGBUILD | grep source= | grep -v "#" | sed 's|source=||g' | sed 's|(||g' | sed 's|)||g' | sed 's|\"||g')"
  homepage="$(cat PKGBUILD | grep url= | sed 's|url=||g' | sed 's|(||g' | sed 's|)||g' | sed 's|\"||g')"
  maintainer="$user"
  depends="$(cat PKGBUILD | grep depends= | grep -v make | grep -v optdepends | grep -v "#" | sed 's|depends=||g' | sed 's|(||g' | sed 's|)||g' | sed 's|\"||g')"
  makedepends="$(cat PKGBUILD | grep makedepends=|  sed 's|makedepends=||g' | sed 's|(||g' | sed 's|)||g' | sed 's|\"||g')"

  echo name="\"$name"\"  > def
  echo version="\"$version"\"  >> def
  echo revision="\"$revision"\"  >> def
  echo category="\"$category"\"  >> def
  echo description="\"$description"\"  >> def
  echo source="\"$source"\"  >> def
  echo homepage="\"$homepage"\"  >> def
  echo maintainer="\"$user"\"  >> def
  echo depends="\"$depends"\"  >> def
  echo makedepends="\"$makedepends"\"  >> def
  sed -i s/"'"/""/g def
  echo >> def
  sed -ne '/^build()/,/^}/p' PKGBUILD >> def
  grep -q "build()" PKGBUILD || echo -e "compile() { \n\n}">> def
  echo >> def
  sed -ne '/^package()/,/^}/p' PKGBUILD >> def
  grep -q "package()" PKGBUILD || echo -e "package() { \n\n}">> def
  sed -i -e \
  's|build()|compile()|g' -e \
  's|${srcdir}/||g' -e \
  's|"${srcdir}"/||g' -e \
  's|$srcdir/||g' -e \
  's|${pkgname}|$name|g' -e 's|${pkgbase}|$name|g' -e 's|$pkgname|$name|g' -e \
  's|$pkgver|$version|g' -e 's|${pkgver}|$version|g' -e 's|${pkgver|${version|g' -e \
  's|"${pkgdir}"|$destdir|g' -e 's|"$pkgdir/"|$destdir|g' -e 's|"$pkgdir"|$destdir|g' -e 's|${pkgdir}|$destdir|g' -e 's|$pkgdir|$destdir|g' -e \
  's|cd "$srcdir/$name-$version"|cd $name-$version|g' -e \
  's|cd "$name-$version"|cd $name-$version|g' -e \
  's|python2|python|g' -e \
  's|\\"|"|g' -e \
  's|	|  |g'  -e \
  's|{,.sig} "|"|g' -e \
  's|{,.sig}"|"|g' def
}

spkg_arch2def()
{
  if [ ! -d $archdir ]; then mkdir -p $archdir; fi
  if [ $ARCH ]; then
    echo -e $Red"Creating SPKG def from PKGBUILD"$Color_Off
    if [ -d $archdir/$ARCH ]; then rm -r $archdir/$ARCH; fi
    echo -e $Green"Downloading..."
    echo -en $Cyan"  >> projects.archlinux.org @packages.git"$Color_Off&&status_busy
    wget --no-check-certificate http://projects.archlinux.org/svntogit/packages.git/plain/trunk/PKGBUILD?h=packages/$ARCH -P $archdir&> /dev/null 2>&1
    status
    if [ ! -e $archdir/PKGBUILD* ]; then
      echo -en $Green"  >> projects.archlinux.org @community.git"$Color_Off&&status_busy
      wget --no-check-certificate http://projects.archlinux.org/svntogit/community.git/plain/trunk/PKGBUILD?h=packages/$ARCH -P $archdir&> /dev/null 2>&1
      status
    fi
    if [ -f $archdir/PKGBUILD* ]; then
      mkdir $archdir/$ARCH && mv $archdir/PKGBUILD* $archdir/$ARCH/PKGBUILD
    else
      AUR=$(echo $ARCH | cut -c1-2)
      echo -en $Yellow"  >> aur.archlinux.org "$Color_Off&&status_busy
      wget --no-check-certificate http://aur.archlinux.org/packages/$AUR/$ARCH/$ARCH.tar.gz -P $archdir &> /dev/null 2>&1
      status
      if [ -f $archdir/$ARCH.tar.gz ]; then
        echo -en $Yellow"Extracting..."
        cd $archdir && bsdtar -zxvf $ARCH.tar.gz&> /dev/null 2>&1 && rm $ARCH.tar.gz
        status
      else
        echo -e $Purple"Package not found..."$Color_Off
        exit
      fi
    fi 
  else
    echo -en $Purple"YoU MusT TyPE pACKaGe Name... Exit"$Color_Off
    status
    exit
  fi
  cd $archdir/$ARCH
  spkg_arch2def_convert
  $editor $archdir/$ARCH/def &
  $editor $archdir/$ARCH/PKGBUILD
  while [ "$(pidof $editor)" ]; do
    sleep 2s && echo "$editor is running... waiting"
  done
  echo -en $Green"Moving to defdir"
  if [ ! -d $defdir/$ARCH  ]; then mkdir -p $defdir/$ARCH; fi
  cp $archdir/$ARCH/* $defdir/$ARCH
  rm $defdir/$ARCH/PKGBUILD
  status
}

spkg_help()
{
  clear
  echo -e $BCyan"  SPKG Package manager $spkgver [commands]"
  echo
  echo -e $BWhite"         -d  "$White"     Download source code"
  echo -e $BWhite"         -x  "$White"     Extract source tarball"
  echo -e $BWhite"         -c  "$White"     Compile package"
  echo -e $BWhite"        -ci  "$White"     Compile and install package"
  echo -e $BWhite"         -i  "$White"     Install package(s)"
  echo -e $BWhite"         -r  "$White"     Remove package(s)"
  echo -e $BWhite"      -info  "$White"     Show installed package information"
  echo -e $BWhite"      -file  "$White"     Search file"
  echo -e $BWhite"    -repack  "$White"     Repack installed package"
  echo -e $BWhite"      -pack  "$White"     Compress package from folder"
  echo -e $BWhite"         -a  "$White"     Find and convert ArchLinux PKGBUILD to def"
  echo -e $BWhite"         -e  "$White"     Extract spkg package"
  echo -e $BWhite"       -ver  "$White"     Check updates for build scripts"
  echo -e $BWhite"    -makesb  "$White"     Compress packages to sb bundle"
  echo -e $BCyan
  echo "\
  SPKG Package manager $spkgver [settings]"
  echo -e $White
  echo -e "\
    $BWhite"CFLAGS"$White
    $CFLAGS
    
    $BWhite"CXXFLAGS"$White
    $CXXFLAGS
    
    $BWhite"LDFLAGS"$White
    $LDFLAGS
    
    $BWhite"maindir"$White
    $maindir
    
    $BWhite"user"$White
    $user"
  echo -e $Color_Off
}

spkg_makesb_gzip()
{
  if [ -d install ]; then rm -r install; fi
  for spkg in $(ls *.spkg); do 
  echo -en $Cyan"Extracting $spkg..."$Color_Off&&status_busy
  bsdtar xjf $spkg -C $PWD &> /dev/null 2>&1  
  status
  done
  echo -en $Cyan"Making SB bundle... Please wait..."$Color_Off&&status_busy
  echo
  mksquashfs install bundle.sb -comp gzip -b 524288
  echo -en $Cyan"Cleaning"$Color_Off
  rm -r install
  status
}

spkg_installed_info()
{
  if [ $PKG ]
  then
    if [ -d /var/lib/spkg/installed/$PKG ]; then
      . /var/lib/spkg/installed/$PKG/def
      date=$(date -r /var/lib/spkg/installed/$PKG/files.list "+%d-%B-%Y  %H:%M")
      echo -e $Red"Package Name:  "$Yellow$name
      echo -e $Red"Version:       "$Yellow$version
      echo -e $Red"Revision:      "$Yellow$revision
      echo -e $Red"Description:   "$Yellow$description
      echo -e $Red"Category:      "$Yellow$category 
      echo -e $Red"Source URL:    "$Yellow$source
      echo -e $Red"Homepage:      "$Yellow$homepage
      echo -e $Red"Maintainer:    "$Yellow$maintainer
      echo -e $Red"Dependencies:  "$Yellow$depends
      echo -e $Red"Build Deps:    "$Yellow$makedepends
      echo -e $Red"Compiled:      "$Yellow$date$Color_Off
    else
      echo -en $White"$PKG Is Not Installed"$Color_Off
      status
    fi
  else
    echo -en $Purple"YoU MusT TyPE pACKaGe Name... Exit"$Color_Off
    status
  fi
}

spkg_file_search()
{
  if [ $SFILE ]
  then
    pdist="\\033[27G"
    echo -en $BYellow"Package" && echo -e $BCyan$pdist"File"$Color_Off
    cd /var/lib/spkg/installed
    for all in $(ls); do 
      cat $all/files.list | grep $SFILE | while read file; do
        pkg=$all
        case "$(basename $file)" in
          *"$SFILE"* ) echo -en $Yellow$pkg && echo -e $Cyan$pdist$file$Color_Off;;
        esac
        done
     done  
  else
    echo -en $Purple"You should type file name to search..."$Color_Off
    status
    exit
  fi
}

spkg_version_check()
{
  folder="$PWD"
  idist="\\033[30G"
  adist="\\033[55G"
  if [ -d /tmp/ipr ]; then rm -r /tmp/ipr && mkdir /tmp/ipr; else mkdir /tmp/ipr; fi
  echo -en $BWhite"Name" && echo -en $BWhite$idist"In directory"&& echo -e $BWhite$adist"Arch Latest"$Color_Off
  for i in $(ls -1 $folder) ; do
  if [ ! -f $folder/$i/def ]; then
  echo -e $Purple"$i"$Color_Off && continue; fi
  . /$folder/$i/def
  short=$(echo $i | cut -c1-2)
  wget --no-check-certificate http://projects.archlinux.org/svntogit/packages.git/plain/trunk/PKGBUILD?h=packages/$i -P /tmp/ipr&> /dev/null 2>&1
  if [ ! -f /tmp/ipr/PKGBUILD* ]; then
  wget --no-check-certificate http://projects.archlinux.org/svntogit/community.git/plain/trunk/PKGBUILD?h=packages/$i -P /tmp/ipr&> /dev/null 2>&1
  fi
  if [ -f /tmp/ipr/PKGBUILD* ]; then
    mkdir /tmp/ipr/$i && mv /tmp/ipr/PKGBUILD* /tmp/ipr/$i/PKGBUILD
   else
   wget --no-check-certificate http://aur.archlinux.org/packages/$short/$i/$i.tar.gz -P /tmp/ipr&> /dev/null 2>&1
   if [ -f /tmp/ipr/$i.tar.gz ]; then
     cd /tmp/ipr && bsdtar -zxvf $i.tar.gz&> /dev/null 2>&1 && rm $i.tar.gz
   fi
  fi
  if [ -d /tmp/ipr/$i ]; then
    pkgver=$(. /tmp/ipr/$i/PKGBUILD &> /dev/null 2>&1 && echo $pkgver) || pkgver="unknown"
  else
    pkgver="unknown"
  fi
  if [[ "$version" != "$pkgver" ]]; then archcolor=$Red; else archcolor=$Color_Off; fi
  if [[ "$pkgver" == "unknown" ]]; then archcolor=$Yellow; fi
  echo -n $name && echo -en $idist$version && echo -e $archcolor$adist$pkgver$Color_Off; done
  rm -r /tmp/ipr&> /dev/null 2>&1
}

###################
# PAKA
###################

paka_build_base()
{
  if [ -f $pakadir/core.list ]; then echo "Exit" && exit; fi
  if [ ! -d $pakadir/tmp ]; then mkdir -p $pakadir/tmp; fi
  cd $pakadir

  echo -e $BWhite"Updating packages database"$Color_Off
  #Download
  if [ ! -f $pakadir/tmp/core.db ]; then
    echo -n "  >> Downloading core.db                           "
    wget --progress=dot $arm_mirror/core/os/$CARCH/core.db -P $pakadir/tmp --no-check-certificate 2>&1 | grep --line-buffered "%" | \
    sed -u -e "s,\.,,g" | awk '{printf("\b\b\b\b%4s", $2)}'
    echo
  fi

  if [ ! -f $pakadir/tmp/community.db ]; then
    echo -n "  >> Downloading community.db                      "
    wget --progress=dot $arm_mirror/community/os/$CARCH/community.db -P $pakadir/tmp --no-check-certificate 2>&1 | grep --line-buffered "%" | \
    sed -u -e "s,\.,,g" | awk '{printf("\b\b\b\b%4s", $2)}'
    echo
  fi

  if [ ! -f $pakadir/tmp/extra.db ]; then
    echo -n "  >> Downloading extra.db                          "
    wget --progress=dot $arm_mirror/extra/os/$CARCH/extra.db -P $pakadir/tmp --no-check-certificate 2>&1 | grep --line-buffered "%" | \
    sed -u -e "s,\.,,g" | awk '{printf("\b\b\b\b%4s", $2)}'
    echo
  fi

  #Extract
  mkdir -p $pakadir/{core,community,extra}
  echo -e $BWhite"Extracting"$Color_Off
  echo "  >> core.db "
  bsdtar -xf $pakadir/tmp/core.db -C $pakadir/core
  echo "  >> community.db "
  bsdtar -xf $pakadir/tmp/community.db -C $pakadir/community
  echo "  >> extra.db"
  bsdtar -xf $pakadir/tmp/extra.db -C $pakadir/extra

  #Make list
  echo -e $BWhite"Making packages list"$Color_Off
  cd $pakadir/core
  echo "  >> core.list "
  for i in $(ls); do 
    head -2 $i/desc | tail -1 >> $pakadir/core.list
  done

  echo "  >> community.list "
  cd $pakadir/community
  for i in $(ls); do 
    head -2 $i/desc | tail -1 >> $pakadir/community.list
  done

  echo "  >> extra.list"
  cd $pakadir/extra
  for i in $(ls); do 
    head -2 $i/desc | tail -1 >> $pakadir/extra.list
  done

  rm -r $pakadir/{core,community,extra,tmp}
}

paka_search_package()
{
  if [ $PKG ]
  then
    for i in core community extra; do
      grep ^$PKG $pakadir/$i.list
    done
  else
    echo "You should type file name to search..."
  fi
}

paka_download_sources()
{
  for repo in core community extra; do
    file=$(cat $pakadir/$repo.list | grep -x $PKG)
    for i in $file; do
      if [ ! -f $srcdir/$i ]; then
      echo -en "Downloading $i...""\\033[60G"
      wget --progress=dot $arm_mirror/$repo/os/$CARCH/$i -P $srcdir --no-check-certificate 2>&1 | grep --line-buffered "%" | \
      sed -u -e "s,\.,,g" | awk '{printf("\b\b\b\b%4s", $2)}'
      echo
      fi
    done
  done
}

paka_convert_function()
{
  for repo in core community extra; do
    spkg_setup_dirs
    file=$(cat $pakadir/$repo.list | grep -x $PKG)
    for i in $file; do
    folder=$RANDOM
    mkdir $srcdir/$folder
    case "$i" in
      *.tar.gz) bsdtar -xzf $srcdir/$i -C $srcdir/$folder &>/dev/null 2>&1;;
      *.tar.xz) bsdtar -xf $srcdir/$i -C $srcdir/$folder &>/dev/null 2>&1;;
    esac
    cd $srcdir/$folder
    mkdir install
    for dsrc in $(ls -d */ | grep -v install)
      do
      mv $dsrc install
      name=$(cat .PKGINFO | grep pkgname | sed 's|pkgname = ||g')
      aver=$(cat .PKGINFO | grep pkgver | sed 's|pkgver = ||g')
      version=$(echo $aver | sed 's/-[^-]*$//')
      revision=${aver##*-}
      category="development"
      description=$(cat .PKGINFO | grep pkgdesc | sed 's|pkgdesc = ||g')
      cat .PKGINFO | grep depend | grep -v optdepend | sed 's|depend = ||g' > /tmp/deps
      cat .PKGINFO | grep replaces | sed 's|replaces = ||g' > /tmp/replaces
      cat .PKGINFO | grep conflict | sed 's|conflict = ||g' > /tmp/conflict
      cat .PKGINFO | grep provides | sed 's|provides = ||g' > /tmp/provides
      depends=$(for i in $(cat /tmp/deps); do echo -n $i" ";done)
      makedepends=""
      source="$arm_mirror/$repo/os/$CARCH/$i"
      homepage=$(cat .PKGINFO | grep url | sed 's|url = ||g')
      maintainer=$(cat .PKGINFO | grep packager | sed 's|packager = ||g')
      replaces=$(for i in $(cat /tmp/replaces); do echo -n $i" ";done)
      conflict=$(for i in $(cat /tmp/conflict); do echo -n $i" ";done)
      provides=$(for i in $(cat /tmp/provides); do echo -n $i" ";done)
      echo name="\"$name"\"  > def
      echo version="\"$version"\"  >> def
      echo revision="\"$revision"\"  >> def
      echo category="\"$category"\"  >> def
      echo description="\"$description"\"  >> def
      echo source="\"$source"\"  >> def
      echo homepage="\"$homepage"\"  >> def
      echo maintainer="\"$maintainer"\"  >> def
      echo depends="\"$depends"\"  >> def
      echo makedepends="\"$makedepends"\"  >> def
      [ "$replaces" ] && echo replaces="\"$replaces"\"  >> def
      [ "$conflict" ] && echo conflict="\"$conflict"\"  >> def
      [ "$provides" ] && echo provides="\"$provides"\"  >> def
      echo >> def
      echo "compile() {">> def
      echo "  cd \$build">> def
      echo "  for file in .INSTALL .PKGINFO .MTREE; do if [ -d \$build/\$file ]; then rm \$build/\$file; fi; done">> def
      echo "}">> def
      echo >> def
      echo "package() {">> def
      echo "  cp -a \$build/* \$destdir">> def
      echo "}">> def
      sed -i 's| "|"|g' def
      done
      mkdir -p $name
      mv install $name
      mkdir -p $name/install/var/lib/spkg/installed/$name
      mv def $name/install/var/lib/spkg/installed/$name
      . $name/install/var/lib/spkg/installed/$name/def
      destdir="$PWD/$name/install"
      spkg_compress_directory
      rm -r $srcdir/$folder
      sleep 0.3
      if [[ $install == "yes" ]]; then
      paka_install_function
      fi
    done
  done
}

paka_install_function()
{
  cd $pkgdir
  spkg -i $name-$version-$revision-$CARCH.spkg
}

paka_convert_package()
{
  if [ $PKG ]
    then
      paka_download_sources
      install="no"
      paka_convert_function
    else
      echo "You should type package name..."
  fi
}

paka_install_package()
{
  if [ $PKG ]
    then
      paka_download_sources
      install="yes"
      paka_convert_function
    else
      echo "You should type package name..."
  fi
}

paka_shell_search()
{
  echo "Type package name to search"
  while true; do
    read PKG
    echo -en $Yellow
    paka -Ss $PKG
    echo -en $Color_Off
  done
}

paka_list_check()
{
  if [ ! -f 01_core.list ] || [ ! -f 02_xorg.list ] || [ ! -f 03_extra.list ] || [ ! -f 04_devel.list ]; then
    echo "Missing packages list" && exit 1
  else
    dist="\\033[55G"
    echo -en $BWhite"Package Name" && echo -e $BWhite$dist"Status"$Color_Off
    for list in 01_core.list 02_xorg.list 03_extra.list 04_devel.list; do
      cat $list | while read package; do
        status="missing"
        color="$Red"
        for i in core community extra; do
          if [ $(grep -x $package $pakadir/$i.list) ]; then status="found" && color="$Green"; fi
        done
        echo -n $package && echo -e $dist$color$status$Color_Off
      done
    done
  fi
}

###################
# STATUS
###################

status_busy() {
  echo -en $DIST $Cyan"  [busy]"$Color_Off
}

status() {
  if   [ $? = 0 ]; then echo -e $DIST $Green"    [ok]"$Color_Off
  elif [ $? = 1 ]; then echo -e $DIST $Red"[failed]"$Color_Off; fi
}

###################
# COLORS
###################

# Reset
Color_Off='\e[0m'       # Text Reset

# Regular Colors
Black='\e[0;30m'        # Black
Red='\e[0;31m'          # Red
Green='\e[0;32m'        # Green
Yellow='\e[0;33m'       # Yellow
Blue='\e[0;34m'         # Blue
Purple='\e[0;35m'       # Purple
Cyan='\e[0;36m'         # Cyan
White='\e[0;37m'        # White

# Bold
BBlack='\e[1;30m'       # Black
BRed='\e[1;31m'         # Red
BGreen='\e[1;32m'       # Green
BYellow='\e[1;33m'      # Yellow
BBlue='\e[1;34m'        # Blue
BPurple='\e[1;35m'      # Purple
BCyan='\e[1;36m'        # Cyan
BWhite='\e[1;37m'       # White

# Underline
UBlack='\e[4;30m'       # Black
URed='\e[4;31m'         # Red
UGreen='\e[4;32m'       # Green
UYellow='\e[4;33m'      # Yellow
UBlue='\e[4;34m'        # Blue
UPurple='\e[4;35m'      # Purple
UCyan='\e[4;36m'        # Cyan
UWhite='\e[4;37m'       # White

# Background
On_Black='\e[40m'       # Black
On_Red='\e[41m'         # Red
On_Green='\e[42m'       # Green
On_Yellow='\e[43m'      # Yellow
On_Blue='\e[44m'        # Blue
On_Purple='\e[45m'      # Purple
On_Cyan='\e[46m'        # Cyan
On_White='\e[47m'       # White

# High Intensty
IBlack='\e[0;90m'       # Black
IRed='\e[0;91m'         # Red
IGreen='\e[0;92m'       # Green
IYellow='\e[0;93m'      # Yellow
IBlue='\e[0;94m'        # Blue
IPurple='\e[0;95m'      # Purple
ICyan='\e[0;96m'        # Cyan
IWhite='\e[0;97m'       # White

# Bold High Intensty
BIBlack='\e[1;90m'      # Black
BIRed='\e[1;91m'        # Red
BIGreen='\e[1;92m'      # Green
BIYellow='\e[1;93m'     # Yellow
BIBlue='\e[1;94m'       # Blue
BIPurple='\e[1;95m'     # Purple
BICyan='\e[1;96m'       # Cyan
BIWhite='\e[1;97m'      # White

# High Intensty backgrounds
On_IBlack='\e[0;100m'   # Black
On_IRed='\e[0;101m'     # Red
On_IGreen='\e[0;102m'   # Green
On_IYellow='\e[0;103m'  # Yellow
On_IBlue='\e[0;104m'    # Blue
On_IPurple='\e[10;95m'  # Purple
On_ICyan='\e[0;106m'    # Cyan
On_IWhite='\e[0;107m'   # White

DIST="\\033[69G"
DATE=$(date +%d-%m-%y)